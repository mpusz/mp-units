# The MIT License (MIT)
#
# Copyright (c) 2018 Mateusz Pusz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: CMake Test Package CI

on:
  push:
    paths-ignore:
      - "docs/**"
      - "example/**"
      - "test/**"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "example/**"
      - "test/**"

jobs:
  test_package:
    name: "${{ matrix.formatting }} ${{ matrix.contracts }} C++${{ matrix.std }} ${{ matrix.config.name }} ${{ matrix.build_type }}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        formatting: ["std::format", "fmtlib"]
        contracts: ["none", "gsl-lite", "ms-gsl"]
        std: [20, 23]
        config:
          # - {
          #     name: "MSVC 14.2",
          #     os: windows-2019,
          #     compiler: { type: VISUAL, version: 16, cc: "", cxx: "" },
          #   }
          # - {
          #     name: "MSVC 14.3",
          #     os: windows-2022,
          #     compiler: { type: MSVC, version: 193, cc: "", cxx: "" },
          #   }
          - {
              name: "GCC-12",
              os: ubuntu-24.04,
              compiler:
                {
                  type: GCC,
                  version: 12,
                  cc: "gcc-12",
                  cxx: "g++-12",
                },
              cxx_modules: "False",
              std_format_support: "False",
            }
          - {
              name: "GCC-13",
              os: ubuntu-24.04,
              compiler:
                {
                  type: GCC,
                  version: 13,
                  cc: "gcc-13",
                  cxx: "g++-13",
                },
              cxx_modules: "False",
              std_format_support: "True",
            }
          - {
              name: "GCC-14",
              os: ubuntu-24.04,
              compiler:
                {
                  type: GCC,
                  version: 14,
                  cc: "gcc-14",
                  cxx: "g++-14",
                },
              cxx_modules: "False",
              std_format_support: "True"
            }
          - {
              name: "Clang-16",
              os: ubuntu-22.04,
              compiler:
                {
                  type: CLANG,
                  version: 16,
                  cc: "clang-16",
                  cxx: "clang++-16",
                },
              lib: "libc++",
              cxx_modules: "False",
              std_format_support: "False",
            }
          - {
              name: "Clang-17",
              os: ubuntu-24.04,
              compiler:
                {
                  type: CLANG,
                  version: 17,
                  cc: "clang-17",
                  cxx: "clang++-17",
                },
              lib: "libc++",
              cxx_modules: "False",
              std_format_support: "True",
            }
          - {
              name: "Clang-18",
              os: ubuntu-24.04,
              compiler:
                {
                  type: CLANG,
                  version: 18,
                  cc: "clang-18",
                  cxx: "clang++-18",
                },
              lib: "libc++",
              cxx_modules: "False",
              std_format_support: "True"
            }
          - {
              name: "Apple Clang 15",
              os: macos-14,
              compiler:
                {
                  type: APPLE_CLANG,
                  version: "15.0",
                  cc: "clang",
                  cxx: "clang++",
                },
              cxx_modules: "False",
              std_format_support: "False",
            }
        build_type: ["Release", "Debug"]
        exclude:
          - formatting: "std::format"
            config: { std_format_support: "False" }

    env:
      CC: ${{ matrix.config.compiler.cc }}
      CXX: ${{ matrix.config.compiler.cxx }}

    steps:
      - name: Downcase 'build_type'
        id: build_type
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ matrix.build_type }}
      - uses: actions/checkout@v4
      - run: echo "cache_id=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_ENV
      - name: Cache Conan data
        uses: actions/cache@v4
        if: always()
        env:
          cache-name: cache-conan-data
        with:
          path: ~/.conan2/p
          key: cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-${{ matrix.contracts }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.config.compiler.version }}-${{ matrix.std }}-${{ env.cache_id }}
          restore-keys: |
            cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-${{ matrix.contracts }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.config.compiler.version }}-${{ matrix.std }}-
            cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-${{ matrix.contracts }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.config.compiler.version }}-
            cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-${{ matrix.contracts }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-
            cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-${{ matrix.contracts }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-
            cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-${{ matrix.contracts }}-${{ matrix.config.compiler.type }}-
            cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-${{ matrix.contracts }}-
            cmake-${{ matrix.config.os }}-${{ matrix.formatting }}-
            cmake-${{ matrix.config.os }}-
      - name: Install gcc-13
        if: matrix.config.compiler.type == 'GCC' && matrix.config.compiler.version == '13'
        shell: bash
        run: |
          sudo apt install -y g++-${{ matrix.config.compiler.version }}
      - name: Install Clang
        if: matrix.config.compiler.type == 'CLANG'
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.config.compiler.version }}
          sudo apt install -y clang-tools-${{ matrix.config.compiler.version }}
      - name: Install Libc++
        if: matrix.config.compiler.type == 'CLANG' && matrix.config.lib == 'libc++'
        shell: bash
        run: |
          sudo apt install -y libc++-${{ matrix.config.compiler.version }}-dev libc++abi-${{ matrix.config.compiler.version }}-dev libunwind-${{ matrix.config.compiler.version }}-dev
      - name: Select Xcode version
        if: matrix.config.compiler.type == 'APPLE_CLANG'
        shell: bash
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ matrix.config.compiler.version }}.app && /usr/bin/xcodebuild -version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install Ninja
        shell: bash
        run: |
          pip install -U ninja
      - name: Install Conan
        shell: bash
        run: |
          pip install -U conan
      - name: Configure Conan
        shell: bash
        run: |
          conan profile detect --force
          conan remote add artifactory https://mpusz.jfrog.io/artifactory/api/conan/conan-oss
          if [[ "${{ matrix.config.compiler.type }}" == "CLANG" ]]; then
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.libcxx=.*/compiler.libcxx=${{ matrix.config.lib }}/' ~/.conan2/profiles/default
          fi
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.cppstd=.*/compiler.cppstd=${{ matrix.std }}/' ~/.conan2/profiles/default
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^build_type=.*/build_type=${{ matrix.build_type }}/' ~/.conan2/profiles/default
          conan profile show -pr default
      - run: echo "std_format=$([ "${{ matrix.formatting }}" == "std::format" ] && echo "True" || echo "False")" >> $GITHUB_ENV
      - run: echo "import_std=$([ "${{ matrix.config.cxx_modules }}" == "True" ] && [ "${{ matrix.config.contracts }}" == "none" ] && [ "${{ matrix.formatting }}" == "std::format" ] && echo "True" || echo "False")" >> $GITHUB_ENV
      - name: Install Conan dependencies
        shell: bash
        run: |
          conan install . -b missing -c tools.cmake.cmaketoolchain:generator="Ninja Multi-Config" -c user.mp-units.build:all=False \
                          -o '&:cxx_modules=${{ matrix.config.cxx_modules }}' -o '&:import_std=${{ env.import_std }}' -o '&:std_format=${{ env.std_format }}' -o '&:contracts=${{ matrix.contracts }}'
      - name: Provide dependencies for the build
        shell: bash
        working-directory: src
        run: |
          echo -e '{\n    "version": 4,\n    "include": [\n        "../CMakeUserPresets.json"\n    ]\n}' | cat > CMakeUserPresets.json
      - name: Configure mp-units CMake
        if: matrix.config.compiler.type == 'VISUAL' || matrix.config.compiler.type == 'MSVC'
        shell: cmd
        working-directory: src
        run: |
          cmake --version
          call ..\build\generators\conanvcvars.bat
          cmake --preset conan-default -DCMAKE_INSTALL_PREFIX=../out
      - name: Configure mp-units CMake
        if: matrix.config.compiler.type != 'VISUAL' && matrix.config.compiler.type != 'MSVC'
        shell: bash
        working-directory: src
        run: |
          cmake --version
          cmake --preset conan-default -DCMAKE_INSTALL_PREFIX=../out
      - name: Install mp-units
        shell: bash
        working-directory: src
        run: |
          cmake --build --preset conan-${{ steps.build_type.outputs.lowercase }} --target install
      - name: Provide dependencies for test_package
        shell: bash
        working-directory: test_package
        run: |
          echo -e '{\n    "version": 4,\n    "include": [\n        "../CMakeUserPresets.json"\n    ]\n}' | cat > CMakeUserPresets.json
      - name: Build test_package CMake (local build)
        if: matrix.config.compiler.type == 'VISUAL' || matrix.config.compiler.type == 'MSVC'
        shell: cmd
        working-directory: test_package
        run: |
          call ..\build\generators\conanvcvars.bat
          cmake --preset conan-default -Dmp-units_DIR=../build -Bbuild/local
          cmake --build build/local --config ${{ matrix.build_type }}
      - name: Build test_package CMake (local build)
        if: matrix.config.compiler.type != 'VISUAL' && matrix.config.compiler.type != 'MSVC'
        shell: bash
        working-directory: test_package
        run: |
          cmake --preset conan-default -Dmp-units_DIR=../build -Bbuild/local
          cmake --build build/local --config ${{ matrix.build_type }}
      - name: Run test_package (local build)
        shell: bash
        working-directory: test_package/build/local/${{ matrix.build_type }}
        run: |
          ./test_package
      - name: Build test_package CMake (installation)
        if: matrix.config.compiler.type == 'VISUAL' || matrix.config.compiler.type == 'MSVC'
        shell: cmd
        working-directory: test_package
        run: |
          call ..\build\generators\conanvcvars.bat
          cmake --preset conan-default -DCMAKE_INSTALL_PREFIX=../out -Bbuild/install
          cmake --build build/install --config ${{ matrix.build_type }}
      - name: Build test_package CMake (installation)
        if: matrix.config.compiler.type != 'VISUAL' && matrix.config.compiler.type != 'MSVC'
        shell: bash
        working-directory: test_package
        run: |
          cmake --preset conan-default -DCMAKE_INSTALL_PREFIX=../out -Bbuild/install
          cmake --build build/install --config ${{ matrix.build_type }}
      - name: Run test_package (installation)
        shell: bash
        working-directory: test_package/build/install/${{ matrix.build_type }}
        run: |
          ./test_package
      - name: Clean Conan cache before backup
        shell: bash
        run: |
          conan remove *#~latest --confirm
          conan remove *:*#~latest --confirm
          conan cache clean "*" -s -b -d
