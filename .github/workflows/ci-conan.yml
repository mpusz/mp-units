# The MIT License (MIT)
#
# Copyright (c) 2018 Mateusz Pusz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Conan CI

on:
  push:
    paths-ignore:
    - 'docs/**'
  pull_request:
    paths-ignore:
    - 'docs/**'

jobs:
  build:
    name: ${{ matrix.config.name }} ${{ matrix.build_type }} [downcast=${{ matrix.downcast_mode }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows MSVC 2019",
            os: windows-latest,
            compiler: { type: VISUAL, version: 16, cc: "cl", cxx: "cl" }
          }
        - {
            name: "Ubuntu GCC 10.3.0",
            os: ubuntu-20.04,
            compiler: { type: GCC, version: 10, cc: "gcc-10", cxx: "g++-10" },
            lib: "libstdc++11"
          }
        - {
            name: "Ubuntu Clang 12.0.0 + libstdc++11",
            os: ubuntu-20.04,
            compiler: { type: CLANG, version: 12, cc: "clang-12", cxx: "clang++-12" },
            lib: "libstdc++11"
          }
        - {
            name: "Ubuntu Clang 12.0.0 + libc++",
            os: ubuntu-20.04,
            compiler: { type: CLANG, version: 12, cc: "clang-12", cxx: "clang++-12" },
            lib: "libc++"
          }
        - {
            name: "Ubuntu Clang 13.0.0 + libc++",
            os: ubuntu-20.04,
            compiler: { type: CLANG, version: 13, cc: "clang-13", cxx: "clang++-13" },
            lib: "libc++"
          }
        # In case a Conan docker image will be needed to provide a specific configuration we can use a Docker image as follows
        # - {
        #     name: "Ubuntu GCC 10.2.0",
        #     os: ubuntu-20.04,
        #     compiler: { type: GCC, version: 10, cc: "gcc-10", cxx: "g++-10" },
        #     docker_image: conanio/gcc10
        #   }
        build_type: [ "Release", "Debug" ]
        downcast_mode: [ "on", "auto" ]
    steps:
      - uses: actions/checkout@v2
      - uses: hendrikmuhs/ccache-action@v1
        if: runner.os == 'Linux'
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-${{ matrix.config.compiler.version }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.downcast_mode }}
          max-size: 50M
      - name: Install Clang
        if: matrix.config.compiler.type == 'CLANG'
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.config.compiler.version }}
      - name: Install Libc++
        if: matrix.config.compiler.type == 'CLANG' && matrix.config.lib == 'libc++'
        shell: bash
        run: |
          sudo apt install -y libc++-${{ matrix.config.compiler.version }}-dev libc++abi-${{ matrix.config.compiler.version }}-dev libunwind-${{ matrix.config.compiler.version }}-dev
      - name: Install Ninja
        # TODO Find a proper syntax to make the below work
        # if: !matrix.config.docker_image
        shell: bash
        run: |
          if [ $RUNNER_OS == 'Linux' ]; then
            sudo apt install -y ninja-build
          elif [ $RUNNER_OS == 'Windows' ]; then
            choco install ninja
          else
            echo "'$RUNNER_OS' not supported"
            exit 1
          fi
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Conan Package Tools
        run: |
          pip install -U conan_package_tools
      - name: Configure Conan
        # TODO Find a proper syntax to make the below work
        # if: !matrix.config.docker_image
        shell: bash
        run: |
          conan config init
          if [[ "${{ matrix.config.compiler.type }}" == "GCC" || "${{ matrix.config.compiler.type }}" == "CLANG" ]]; then
            conan profile update settings.compiler.libcxx=${{ matrix.config.lib }} default
          fi
          conan profile show default
      # - name: Add support for clang-13 to Conan's settings.yml
      #   # TODO Remove when Conan will support clang-13
      #   if: matrix.config.compiler.type == 'CLANG'
      #   shell: bash
      #   run: |
      #     sed -i -e 's/"8", "9", "10", "11", "12"]/"8", "9", "10", "11", "12", "13"]/' ~/.conan/settings.yml
      - name: Run Conan Package Tools
        shell: bash
        env:
          CONAN_USERNAME: mpusz
          CONAN_OPTIONS: mp-units:build_docs=False,mp-units:downcast_mode=${{ matrix.downcast_mode }}
          CONAN_UPLOAD: https://mpusz.jfrog.io/artifactory/api/conan/conan-oss
          CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
          CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
          CONAN_CMAKE_GENERATOR: Ninja
          CONAN_BUILD_TYPES: ${{ matrix.build_type }}
          CC: ${{ matrix.config.compiler.cc }}
          CXX: ${{ matrix.config.compiler.cxx }}
          CONAN_${{ matrix.config.compiler.type }}_VERSIONS: ${{ matrix.config.compiler.version }}
        run: |
          if [ ! -z "${{ matrix.config.docker_image }}" ]; then
            export CONAN_DOCKER_IMAGE=${{ matrix.config.docker_image }}
          fi
          python build.py
